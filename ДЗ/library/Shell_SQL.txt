from django.db.models import F, Q, Count, Avg, ExpressionWrapper, DecimalField
from datetime import time, date
from django.utils.timezone import datetime
from liba.models import Author, Book, Review

# Базовые фильтры
Author.objects.filter(first_name='John')
Author.objects.exclude(last_name='Doe')

# Числовые сравнения
Book.objects.filter(price__lt=500)
Book.objects.filter(price__lte=300)
Book.objects.filter(price__gt=1000)
Book.objects.filter(price__gte=750)

# Поиск текста
Book.objects.filter(title__icontains='django')
Book.objects.filter(title__icontains='python')
Book.objects.filter(title__startswith='Advanced')
Book.objects.filter(title__istartswith='pro')
Book.objects.filter(title__endswith='Guide')
Book.objects.filter(title__iendswith='tutorial')

# Null
Review.objects.filter(comment__isnull=True)
Review.objects.filter(comment__isnull=False)

# IN и Range
Author.objects.filter(id__in=[1, 3, 5])
Book.objects.filter(published_date__year=2023)

# Регулярки
Book.objects.filter(title__regex=r'^Python')
Author.objects.filter(last_name__iregex=r'^Mc')

# Дата и время
Book.objects.filter(published_date__year=2024)
Book.objects.filter(published_date__month=6)
Review.objects.filter(created_at__day=11)
Book.objects.filter(published_date__week=23)
Review.objects.filter(created_at__week_day=3)  # 1 - Sunday
Book.objects.filter(published_date__quarter=2)
Review.objects.filter(created_at__date=datetime(2024, 6, 16).date())
Review.objects.filter(created_at__time=time(15, 30))
Review.objects.filter(created_at__hour=15)
Review.objects.filter(created_at__minute=30)
Review.objects.filter(created_at__second=0)

# Связанные поля
Book.objects.filter(author__email='author@example.com')
Book.objects.filter(author__last_name__icontains='smith')
Author.objects.annotate(book_count=Count('books')).filter(book_count__gt=5)

# JSON поля
Book.objects.filter(metadata__genre='fiction')
Book.objects.filter(metadata__tags__icontains='bestseller')

# F и Q выражения
Book.objects.filter(price=F('discount'))
Book.objects.filter(price__gt=F('discount'))
Author.objects.filter(Q(first_name='Alice') | ~Q(last_name='Brown'))

# Аннотации
Author.objects.annotate(book_count=Count('books'))
Book.objects.annotate(avg_rating=Avg('reviews__rating'))
Book.objects.annotate(final_price=ExpressionWrapper(F('price') - F('discount'), output_field=DecimalField()))

# select_related / prefetch_related
Book.objects.select_related('author')
Author.objects.prefetch_related('books')
