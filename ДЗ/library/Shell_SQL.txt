from django.db.models import F, Q, Count, Avg, ExpressionWrapper, DecimalField
from datetime import time, date
from django.utils.timezone import datetime
from library.models import Author, Book, Review

# Базовые фильтры
print(Author.objects.filter(first_name='John'))
print(Author.objects.exclude(last_name='Doe'))

# Числовые сравнения
print(Book.objects.filter(price__lt=500))
print(Book.objects.filter(price__lte=300))
print(Book.objects.filter(price__gt=1000))
print(Book.objects.filter(price__gte=750))

# Поиск текста
print(Book.objects.filter(title__icontains='django'))
print(Book.objects.filter(title__icontains='python'))
print(Book.objects.filter(title__startswith='Advanced'))
print(Book.objects.filter(title__istartswith='pro'))
print(Book.objects.filter(title__endswith='Guide'))
print(Book.objects.filter(title__iendswith='tutorial'))

# Null
print(Review.objects.filter(comment__isnull=True))
print(Review.objects.filter(comment__isnull=False))

# IN и Range
print(Author.objects.filter(id__in=[1, 3, 5]))
print(Book.objects.filter(published_date__year=2023))

# Регулярки
print(Book.objects.filter(title__regex=r'^Python'))
print(Author.objects.filter(last_name__iregex=r'^Mc'))

# Дата и время
print(Book.objects.filter(published_date__year=2024))
print(Book.objects.filter(published_date__month=6))
print(Review.objects.filter(created_at__day=11))
print(Book.objects.filter(published_date__week=23))
print(Review.objects.filter(created_at__week_day=3))  # 1 - Sunday
print(Book.objects.filter(published_date__quarter=2))
print(Review.objects.filter(created_at__date=datetime(2024, 6, 16).date()))
print(Review.objects.filter(created_at__time=time(15, 30)))
print(Review.objects.filter(created_at__hour=15))
print(Review.objects.filter(created_at__minute=30))
print(Review.objects.filter(created_at__second=0))

# Связанные поля
print(Book.objects.filter(author__email='author@example.com'))
print(Book.objects.filter(author__last_name__icontains='smith'))
print(Author.objects.annotate(book_count=Count('books')).filter(book_count__gt=5))

# JSON поля
print(Book.objects.filter(metadata__genre='fiction'))
print(Book.objects.filter(metadata__tags__icontains='bestseller'))

# F и Q выражения
print(Book.objects.filter(price=F('discount')))
print(Book.objects.filter(price__gt=F('discount')))
print(Author.objects.filter(Q(first_name='Alice') | ~Q(last_name='Brown')))

# Аннотации
print(Author.objects.annotate(book_count=Count('books')))
print(Book.objects.annotate(avg_rating=Avg('reviews__rating')))
print(Book.objects.annotate(final_price=ExpressionWrapper(F('price') - F('discount'), output_field=DecimalField())))

# select_related / prefetch_related
print(Book.objects.select_related('author'))
print(Author.objects.prefetch_related('books'))
